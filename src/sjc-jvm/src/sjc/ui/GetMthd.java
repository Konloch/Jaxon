/* Copyright (C) 2009, 2012 Stefan Frenz
 *
 * This file is part of SJC, the Small Java Compiler written by Stefan Frenz.
 *
 * SJC is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * SJC is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with SJC. If not, see <http://www.gnu.org/licenses/>.
 */

package sjc.ui;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;

/**
 * GetMthd: search ip in file created by debug.CodeInfo
 *
 * @author S. Frenz
 * @version 120308 added support for multiple addresses via standard input and "-s" option
 * version 091105 initial version
 */

public class GetMthd
{
	private static ArrayList<String> data;
	private static boolean shortOut;
	private static String lastShortLine;
	
	public static void main(String[] args)
	{
		BufferedReader br;
		
		if (args == null || (args.length != 2 && args.length != 3) || (args.length == 3 && !(shortOut = args[2].equals("-s"))))
		{
			System.out.println("GetMthd for code info generated by SC");
			System.out.println("Please give a file and a code address as parameter");
			System.out.println("if second parameter is \"-\", read multiple addresses from standard input");
			System.out.println("optional third parameter is \"-s\" to print only short output");
			return;
		}
		
		data = new ArrayList<String>();
		try
		{
			br = new BufferedReader(new FileReader(args[0]));
			String line;
			while ((line = br.readLine()) != null)
				data.add(line);
			br.close();
		}
		catch (IOException e)
		{
			System.out.println("Could not open file: " + e.getMessage());
			return;
		}
		if (args[1].equals("-"))
		{
			BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
			String addr;
			try
			{
				while ((addr = in.readLine()) != null)
					findIP(addr);
			}
			catch (IOException e)
			{
				System.out.println("Error reading from standard in: " + e.getMessage());
				return;
			}
		}
		else
			findIP(args[1]);
	}
	
	private static void findIP(String addr)
	{
		int ip;
		try
		{
			if (addr.startsWith("0x"))
				ip = Integer.parseInt(addr.substring(2), 16);
			else
				ip = Integer.parseInt(addr);
		}
		catch (NumberFormatException e)
		{
			System.out.println("Invalid code address: " + e.getMessage());
			return;
		}
		
		try
		{
			for (int i = 0; i < data.size(); i++)
			{
				String line = data.get(i);
				if (line.startsWith("code:"))
				{
					String[] token = line.split(" ");
					int start = Integer.parseInt(token[1].substring(2), 16), size = Integer.parseInt(token[2]);
					if (start <= ip && ip < start + size)
					{ //found method
						if (shortOut)
							printShortMethodInfo(i, ip - start);
						else
							printMethodInfo(i, ip - start);
						return;
					}
				}
			}
			System.out.println("address not found");
		}
		catch (IOException e)
		{
			System.out.println("I/O-error: " + e.getMessage());
			return;
		}
		catch (NumberFormatException e)
		{
			System.out.println("invalid number in file");
		}
	}
	
	private static void printShortMethodInfo(int entry, int offset) throws IOException, NumberFormatException
	{
		String line, slhiLine = null, mthd = "";
		
		while (entry < data.size() && !(line = data.get(entry)).equals(""))
		{
			if (line.startsWith("mthd:"))
				mthd = line.substring(6);
			else if (line.startsWith("slhi:") || line.startsWith(" "))
			{
				String[] token = line.split(" ");
				for (int i = 1; i + 1 < token.length; i += 2)
					if (Integer.parseInt(token[i]) <= offset)
						slhiLine = token[i + 1];
			}
			entry++;
		}
		line = mthd + (slhiLine != null ? ":" + slhiLine : "");
		if (line.equals(lastShortLine))
			return;
		System.out.println(line);
		lastShortLine = line;
	}
	
	private static void printMethodInfo(int entry, int offset) throws IOException, NumberFormatException
	{
		String line, slhiLine = null;
		
		while (entry < data.size() && !(line = data.get(entry)).equals(""))
		{
			if (line.startsWith("slhi:") || line.startsWith(" "))
			{
				String[] token = line.split(" ");
				for (int i = 1; i + 1 < token.length; i += 2)
					if (Integer.parseInt(token[i]) <= offset)
						slhiLine = token[i + 1];
			}
			else
				System.out.println(line);
			entry++;
		}
		if (slhiLine != null)
			System.out.println("slhi: " + slhiLine);
	}
}
